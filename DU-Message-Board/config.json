{"slots":{"0":{"name":"bank","type":{"events":[],"methods":[]}},"1":{"name":"screen","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"--Changable Parameters\nlocal admin_users = \"John,Joe,Kurock\" --export The names of your admin users: always have all rights\nlocal blacklist = \"Peter,Smith\" --export The names of those not allowed to use this message board\nlocal users_can_read = true --export normal users can see all messages\nlocal users_can_add = true --export normal users can add new messages \nlocal users_can_delete = false --export normal users can delete all messages.\nlocal users_can_delete_own = true --export normal users can delete only their own messages\nlocal users_limited_view = false --export normal users can only see their own messages and messages marked show all by admins\nlocal title = \"Kurock's Message Board\" --export title shown on inactive screen\nlocal msg_limit = 30 --export maximum number of messages\nlocal reply_limit = 5 --export maximum number of replies\nlocal msg_limit_per_user = 0 --export maximum number of new messages a user can have at once. 0 for unlimited. Does not apply to Admins\nlocal reply_limit_per_user = 0 --export maximum number of replies a user can have in one message. 0 for unlimited. Does not apply to Admins\nlocal msg_character_limit = 255 --export maximum number of characters in a message or reply. \nlocal clear_bank = false --export set to true to clear databases\n\nlocal playerInfoDB = bank\nif (clear_bank) then\n   bank.clear()\n   playerInfoDB.clear() \nend\n\nlocal renderConstants = {\n        version = VERSION,\n        title = title,\n        msgCharLimit = msg_character_limit,\n    }\n\nscreen.setRenderScript(getRenderScript(renderConstants))\nif (screen.getState() == 0) then\n    screen.activate()\nend\n\nlocal limits = {\n        totMsg = msg_limit,\n        totReply = reply_limit,\n        msgCharLimit = msg_character_limit,\n        usrMsgLimit = msg_limit_per_user,\n        usrReplyLimit = reply_limit_per_user\n    }\n\nlocal normalUserRights = RIGHTS_NONE\nif (users_can_read) then\n    normalUserRights = RIGHTS_READONLY\nend\nif (users_can_read and users_can_add) then\n    normalUserRights = RIGHTS_ADDREADONLY\nend\nif (users_can_read and users_can_add and users_can_delete_own) then\n    normalUserRights = RIGHTS_ADDREAD_DELSELF\nend \nif (users_can_read and users_can_add and users_can_delete) then\n    normalUserRights = RIGHTS_FULL\nend    \n\ncontroller = Controller:new()\ncontroller:start(bank,playerInfoDB,screen,limits,admin_users,normalUserRights,users_limited_view,blacklist)\ncontroller:refresh()\n\nunit.setTimer('heartbeat',1)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"controller:setMode(MODE_INACTIVE)\ncontroller:loadInactiveThread()\ncontroller:refresh()","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"--handle action clicks from screen\nlocal action = screen.getScriptOutput()\nif (action == nil or action == '') then return end\nscreen.clearScriptOutput()\n   \nif (action == \"prev\") then\n    controller:getPreviousThread()\n    controller:refresh(action)\nend    \nif (action == \"next\") then\n    controller:getNextThread()\n    controller:refresh(action)\nend\nif (action == \"reply\") then\n    system.print(\"Type your reply into the lua console\")\n    controller.currentAction = action\n    --appendToThread\nend\nif startsWith(action,\"del\") then\n    local val = split(action,'_')\n    local pos = tonumber(val[2])\n    if (controller:isAdmin()) then\n        system.print(\"Are you sure you wish to delete? [y/n] (a for all)\")\n    else\n        system.print(\"Are you sure you wish to delete? [y/n]\")\n    end    \n    controller.delpos = pos\n    controller.currentAction = action\nend\nif (action == \"newMsg\") then\n    system.print(\"Type your message into the Lua console\")\n    controller.currentAction = action\nend\nif (action == \"showall\") then\n    system.print(\"Toggling whether this message will be shown to all limited acces users.\")\n    controller:toggleShowAll()\n    controller:refresh(action)\nend\nif (action == \"promote\") then\n    system.print(\"Showing this message on inactive screen? [y/n]\")\n    controller.currentAction = action\nend","filter":{"args":[{"value":"heartbeat"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"VERSION = 0.18\n\njson = require('dkjson')\n\nMODE_INACTIVE = 0\nMODE_ACTIVE = 1\nRIGHTS_NONE = -1\nRIGHTS_READONLY = 0\nRIGHTS_FULL = 1\nRIGHTS_ADDREADONLY = 2\nRIGHTS_ADDREAD_DELSELF = 3\n\nBIT_PROMOTED = 2\nBIT_ALLSHOW = 1\n\nTHSEP = ';'\nSEP = ','\nCOM_TKN = \"\\\\C\\\\\"\nSEMI_TKN = \"\\\\S\\\\\"\n\ndebugging = false\nfunction printToConsole(txt)\n\tif debugging then system.print(txt) end\nend\n\nController = {}\nfunction Controller:new(o)\n\to = o or {}\n\tsetmetatable(o, self)\n\tself.__index = self\n\treturn o\nend\n\nfunction Controller:start(db,playerInfoDb,screen,limits,adminUsers,rights,limitedView,blacklist)\n\tself.db = db\n\tself.playerInfoDb = playerInfoDb\n\tself.screen = screen\n\tself.limits = limits\n\tself.adminUsers = self:setUsers(adminUsers)\n\tself.blacklist = self:setUsers(blacklist)\n\tself.orderinfo = OrderInfo:new()\n\tself:setMode(MODE_ACTIVE)\n\tself:setRights(rights,limitedView,blacklist)\n\tself.orderinfo:loadDb(db,self.limitedView)\n\tself.currentThread = self:getThread(self.orderinfo:findFirst())\n\tself.currentAction = ''\n\tself.delPos = 0\n\tif (self.rights == RIGHTS_NONE) then\n\t\tunit.exit()\n\tend\nend\n\nfunction Controller:setUsers(usersStr)\n\treturn split(usersStr,SEP)\nend\n\nfunction Controller:isAdmin()\n    local player = getCurrentPlayerInfo()\n    return self:isAdminUser(player.name)\nend    \n\nfunction Controller:isAdminUser(name)\n\tif (self.adminUsers == nil or #self.adminUsers < 1) then return false end\n\tfor i=1,#self.adminUsers,1 do\n\t\tif (self.adminUsers[i] == name) then return true end\n\tend\n\treturn false\nend\n\nfunction Controller:isBlacklistedUser(name)\n\tif (self.blacklist == nil or #self.blacklist < 1) then return false end\n\tfor i=1,#self.blacklist,1 do\n\t\tif (self.blacklist[i] == name) then return true end\n\tend\n\treturn false\nend    \n\nfunction Controller:getPlayerInfoDb()\n\treturn self.playerInfoDb\nend\n\nfunction Controller:setMode(mode)\n\tself.mode = mode or MODE_INACTIVE\nend\n\nfunction Controller:setRights(rights,limitedView)\n\tlocal player = getCurrentPlayerInfo()\n\tif self:isAdminUser(player.name) then\n\t\tself.rights = RIGHTS_FULL\n\t\tself.limitedOnForOthers = limitedView\n\t\tself.limitedView = false\n\t\treturn\n\tend\n\tif self:isBlacklistedUser(player.name) then\n\t\tself.rights = RIGHTS_NONE\n\t\treturn\n\tend\n\tself.rights = rights or RIGHTS_NONE\n\tself.limitedView = limitedView or false\n\tself.limitedOnForOthers = self.limitedView\nend\n\nfunction Controller:addNewThread(txt)\n\tlocal player = getCurrentPlayerInfo()\n\tlocal nextThreadId = self.orderinfo:getNextUnusedId()\n\tlocal thread = Thread:new()\n\tthread:setId(nextThreadId)\n\tlocal msg = Message:new()\n\tmsg:set(player.id,txt)\n\tthread:addMsg(msg)\n\tplayer:save(self.playerInfoDb)\n\tthread:save(self.db)\n\tself.currentThread = thread\n\tself.orderinfo:updateOrderInfoWithNewThread(nextThreadId,player.id)\n\tself.orderinfo:save(self.db)\nend\n\nfunction Controller:deleteFromCurrentThread(pos)\n\tif (pos == 1) then\n\t\tself.orderinfo:deleteCurrent(self.db,self.limitedView)\n\t\tself.currentThread:delete(self.db)\n\t\tself.currentThread = self:getThread(self.orderinfo:findFirst())\n\t\treturn    \n\tend\n\tself.currentThread:delByPos(pos)\n\tself.currentThread:save(self.db)\nend\n\nfunction Controller:appendToCurrentThread(txt)\n\tif (self.currentThread == nil) then\n\t\tself:addNewThread(txt)\n\t\tself.currentThread = self:getThread(self.orderinfo:findFirst())\n\t\treturn\n\tend\n\tself.currentThread = self:appendToThread(self.currentThread.id,txt)\nend\n\nfunction Controller:appendToThread(threadId,txt)\n\tlocal player = getCurrentPlayerInfo()\n\tlocal thread = self:getThread(threadId)\n\tlocal msg = Message:new()\n\tmsg:set(player.id,txt)\n\tthread:addMsg(msg)\n\tplayer:save(self.playerInfoDb)\n\tthread:save(self.db)\n     return thread\nend\n\nfunction Controller:getNextThread()\n\tself.currentThread = self:getThread(self.orderinfo:getNext())\nend\n\nfunction Controller:getPreviousThread()\n\tself.currentThread = self:getThread(self.orderinfo:getPrevious())\nend\n\nfunction Controller:getThread(threadId)\n\tif threadId == nil then return nil end\n\tif self.currentThread ~= nil and self.currentThread.id == threadId then\n\t\treturn self.currentThread\n\tend\n\tlocal thread = Thread:new()\n\tthread:setId(threadId)\n\tthread:loadThread(self.db)\n\treturn thread\nend\n\nfunction Controller:loadInactiveThread()\n\tself.currentThread = self:getThread(self.orderinfo:getInactiveThread())\nend\n\nfunction Controller:applyMsgCharLimit(txt)\n\tlocal limit = tonumber(self.limits.msgCharLimit)\n\tif #txt <= limit then return txt end\n\tlocal result = string.sub(tostring(txt),1,limit-3) .. \"...\"\n\treturn result\nend\n\nfunction Controller:allowNewMessage()\n\tif (self.rights == RIGHTS_READONLY) then return 0 end\n\tif self.rights ~= RIGHTS_FULL and \n\t\tself.limits.usrMsgLimit > 0 and \n\t\tself.orderinfo:getCurrentUserMsgCount() >= self.limits.usrMsgLimit then return 0 end\n\tif self.limits.totMsg > #self.orderinfo.order then return 1 end\n\treturn 0\nend\n\nfunction Controller:allowReply()\n\tif (self.rights == RIGHTS_READONLY) then return 0 end\n\tif self.currentThread == nil then return 0 end\n\tif self.rights ~= RIGHTS_FULL and\n\t\tself.limits.usrReplyLimit > 0 and\n\t\tself.currentThread:getReplyCountByPlayer() >= self.limits.usrReplyLimit then return 0 end\n\tif self.limits['totReply'] > (#self.currentThread.msgs)-1 then return 1 end\n\treturn 0\nend\n\nfunction Controller:isPromoted()\n\tif self.orderinfo:getCurrentMark(BIT_PROMOTED) then return 1 end\n\treturn 0\nend\n\nfunction Controller:isShowAll()\n\tif (not self.limitedOnForOthers) then return -1 end\n\tif self.orderinfo:getCurrentMark(BIT_ALLSHOW) then return 1 end\n\treturn 0\nend\n\nfunction Controller:toggleShowAll()\n\tself.orderinfo:toggleMark(BIT_ALLSHOW)\n\tself.orderinfo:save(self.db)\nend\n\nfunction Controller:togglePromote()\n\tself.orderinfo:togglePromote(self.db)\nend\n\nfunction Controller:refresh()\n\tlocal pageNum = self.orderinfo.current\n\tlocal maxPage = #self.orderinfo.filter\n\tlocal action = ''\n\t\n\tlocal result = tostring(system.getTime()) \n\tresult = result .. SEP .. tostring(pageNum)\n\tresult = result .. SEP .. tostring(maxPage)\n\tresult = result .. SEP .. tostring(self.mode)\n\tresult = result .. SEP .. tostring(self.rights)\n\tresult = result .. SEP .. tostring(self:allowNewMessage())\n\tresult = result .. SEP .. tostring(self:allowReply())\n\tresult = result .. SEP .. tostring(self:isPromoted())\n\tresult = result .. SEP .. tostring(self:isShowAll())\n\tresult = result .. SEP .. tostring(action)\n\tif self.currentThread ~= nil then\n\t\tresult = result .. THSEP .. self.currentThread:serializeForDisplay()\n\tend    \n\tprintToConsole(\"To Screen: \"..result)\n\tself.screen.setScriptInput(result)\nend\n\nfunction Controller:deleteAllByPlayer(pos)\n\tlocal player = self.currentThread:getPlayerIdAt(pos)\n\tif player == nil then return end\n\t--find all threads started by playerId and delete them\n\tlocal threadIds = self.orderinfo:deleteAllInfoByPlayer(player.id,self.db,self.limitedView)\n\tfor _,threadId in ipairs(threadIds) do\n\t\tlocal thread = self:getThread(threadId)\n\t\tthread:delete(self.db)\n\tend\n\tprintToConsole(\"Removed \"..#threadIds..\" messages\")\n\t--for all remaining theads find the pos of the name and\n\tthreadIds = self.orderinfo:getAllThreadIds()\n\tlocal total = 0\n\tfor _,threadId in ipairs(threadIds) do\n\t\tlocal thread = self:getThread(threadId)\n\t\ttotal = total + thread:delRepliesByPlayerId(player.id)\n           system.print(\"Running total: \"..total)\n\t\tthread:save(self.db)\n\tend\n\tprintToConsole(\"Removed \"..total..\" replies\")\n\tself.currentThread = self:getThread(self.orderinfo:findFirst())\nend\n\nPlayerInfo = {}\nfunction PlayerInfo:new(o)\n\to = o or {}\n\tsetmetatable(o, self)\n\tself.__index = self\n\tself.playerNameCache = {} \n\treturn o\nend\n\nfunction PlayerInfo:set(id,name)\n\tself.id = tostring(id) or '0'\n\tself.name = name or \"\"\nend\n\nfunction PlayerInfo:save(db)\n\tprintToConsole(\"Saving Player Info...\"..self.id .. \" \" .. self.name)  \n\tdb.setStringValue(\"U\"..self.id, self.name)\nend\n\nfunction PlayerInfo:loadNameFromDb(db)\n\tlocal name = db.getStringValue(\"U\"..self.id)\n\tif (name ~= nil) then\n\t\tself.name = name\n\tend\n\treturn name\nend\n\nfunction PlayerInfo:getPlayerName(id)\n\tlocal result = self.playerNameCache[id]\n\tif result ~= nil then return result end\n\tself.id = id\n\tresult = self:loadNameFromDb(controller:getPlayerInfoDb())\n\tif result == nil then result = 'Unknown' end\n\tself.playerNameCache[id] = result\n\tself.name = result\n\treturn result\nend\n\nfunction getCurrentPlayerInfo()\n\tlocal id = tostring(unit.getMasterPlayerId())\n\tlocal name = system.getPlayerName(id)\n\tlocal player = PlayerInfo:new()\n\tplayer:set(id,name)\n\treturn player\nend\n\nfunction isCurrentPlayer(id)\n\tlocal mid = tostring(unit.getMasterPlayerId())\n\tif tonumber(mid) == tonumber(id) then return 1 end\n\treturn 0\nend\n\nfunction getReadableTime(timestamp)\n\tlocal now = system.getTime()\n\tlocal time = (now - timestamp)/3600\n\tlocal result = ''\n\t\n\tif (time <=0) then return 'Today' end\n\tlocal days = math.floor(time/24)\n\tif days > 0 then\n\t\ttime = time - (days*24)\n\t\tif days == 1 then return 'A day ago' end\n\t\treturn tostring(days) .. ' days ago'\n\tend\n\treturn 'Today'\nend\n\nfunction isBitSet(bitset,bit)\n\treturn (bitset&bit==bit)\nend\n\nfunction setBit(bitset,bit)\n\treturn bitset|bit\nend\n\nfunction clearBit(bitset,bit)\n\treturn bitset&~bit\nend\n\nOrderInfo = {} -- orders the threads\nfunction OrderInfo:new(o)\n\to = o or {}\n\tsetmetatable(o, self)\n\tself.__index = self\n\tself.order = {}\n\tself.filter = {} \n\tself.current = nil\n\tself.inactiveDisplayThreadId = nil\n\treturn o\nend\n\nfunction OrderInfo:addId(id,playerId,mark)\n\tlocal mark = mark or '0'\n\tlocal orderItem = {['id']=id,['pid']=playerId,['mark']=mark}\n\tprintToConsole('adding ' .. orderItem['id'] .. ' ' .. orderItem['pid'])\n\ttable.insert(self.order,orderItem)\nend\n\nfunction OrderInfo:updateOrderInfoWithNewThread(threadId,playerId)\n\tself:addId(threadId,playerId)\n\tfor i,item in ipairs(self.order) do\n\t\tif (threadId == item['id']) then\n\t\t\ttable.insert(self.filter,i)\n\t\t\tself.current = #self.filter \n\t\t\treturn\n\t\tend    \n\tend\n\tself.current = nil\nend\n\nfunction OrderInfo:getCurrentMark(bit)\n\tif (#self.filter < 1) then return false end\n\treturn self:getMark(self.filter[self.current],bit)\nend\n\nfunction OrderInfo:getMark(i,bit)\n\tif (i < 1 or #self.order < i) then return false end\n\tlocal mark = self.order[i]['mark'] or '0'\n\treturn isBitSet(tonumber(mark),bit)\nend\n\nfunction OrderInfo:toggleMark(bit)\n\tif (self.current == nil) then return end\n\tlocal item = self.order[self.current]\n\tlocal mark = item['mark'] or '0'\n\tif (isBitSet(tonumber(mark),bit)) then\n\t\titem['mark'] = tostring(clearBit(tonumber(mark),bit))\n\telse \n\t\titem['mark'] = tostring(setBit(tonumber(mark),bit))\n\tend\nend\n\nfunction OrderInfo:getCurrentUserMsgCount()\n\tlocal player = getCurrentPlayerInfo()\n\tlocal playerId = tostring(player.id)\n\tlocal result = 0\n\tfor _,item in ipairs(self.order) do\n\t\tif item.pid == playerId then result = result + 1 end\n\tend\n\tprintToConsole(\"Total user messages: \"..result)\n\treturn result\nend\n\nfunction OrderInfo:togglePromote(db)\n\tlocal bit = BIT_PROMOTED\n\t--switch off\n\tif (self:getCurrentMark(bit)) then\n\t\tself:toggleMark(bit)\n\t\tself:save(db)\n\t\treturn\n\tend    \n\t--switching on: set all others to off\n\tfor _,item in ipairs(self.order) do\n\t\tlocal mark = item['mark'] or '0'\n\t\titem['mark'] = tostring(clearBit(tonumber(mark),bit))\n\tend    \n\tself:toggleMark(bit)\n\tself:save(db)\nend\n\nfunction OrderInfo:getInactiveThread()\n\tlocal bit = BIT_PROMOTED\n\tlocal found = false\n\tlocal promItem = nil\n\tfor i,item in ipairs(self.order) do\n\t\tif (self:getMark(i,bit) and not found) then\n\t\t\tpromItem = item\n\t\t\tfound = true\n\t\tend\n\tend\n\tif found then\n\t\treturn promItem.id\n\tend\n\treturn self:findFirst()  \nend\n\nfunction OrderInfo:getItem(pos)\n\tlocal pos = pos or self.filter[self.current]\n\tif self.current == nil then return nil end\n\treturn self.order[pos]\nend\n\nfunction OrderInfo:getContents()\n\tlocal result = ''\n\tfor _,item in ipairs(self.order) do\n\t\tif item ~= nil and item['id'] > 0 then\n\t\t\tif isEmpty(result) then\n\t\t\t\tresult = self:serializeItem(item)\n\t\t\telse\n\t\t\t\tresult = result .. THSEP .. self:serializeItem(item)\n\t\t\tend\n\t\tend\n\tend  \n\treturn result\nend\n\nfunction OrderInfo:save(db)\n\tlocal result = self:getContents()\n\tprintToConsole(\"Saving order: \"..result)\n\tdb.setStringValue(\"Order\", result)\nend\n\nfunction OrderInfo:serializeItem(item)\n\tlocal result = item['id'] .. SEP .. item['pid'] \n\tif (item['mark'] ~= '0') then\n\t\tresult = result .. SEP .. item['mark']\n\tend\n\treturn result\nend\n\nfunction OrderInfo:loadDb(db,limitedView)\n\tself.order = {}\n\tself.filter = {}\n\tlocal txt = db.getStringValue(\"Order\")\n\tprintToConsole(\"Loading order: \"..txt)\n\tlocal items = split(txt,THSEP)\n\tfor _,item in ipairs(items) do\n\t\tlocal params = split(item,SEP)\n\t\tif (#params == 3) then\n\t\t\tself:addId(tonumber(params[1]),params[2],params[3])\n\t\telse\n\t\t\tself:addId(tonumber(params[1]),params[2])\n\t\tend\n\tend\n\t\n\tlocal pid = tostring(unit.getMasterPlayerId())\n\tlocal filterResult = ''\n\tfor i,item in ipairs(self.order) do\n\t\t local val = i\n\t\t --printToConsole(\"Filtered id: \"..item.pid..\" compared to \"..pid)\n\t\t if limitedView and (pid == item.pid or isBitSet(item.mark,BIT_ALLSHOW))then\n\t\t\tfilterResult = filterResult .. ',' .. val\n\t\t\ttable.insert(self.filter,val)\n\t\t elseif not limitedView then\n\t\t\tfilterResult = filterResult .. ',' .. val\n\t\t\ttable.insert(self.filter,val)\n\t\tend\n\tend\n\tprintToConsole(\"Filtered order: \"..filterResult)\nend\n\nfunction OrderInfo:deleteCurrent(db,limitedView)\n\tlocal pos = self.current\n\tlocal item = self.order[self.filter[pos]]\n\tprintToConsole('removing '.. pos .. ' M'..item['id'])\n\titem['id'] = 0\n\tself.current = nil\n\tself:save(db)\n\tself:loadDb(db,limitedView)\nend\n\nfunction OrderInfo:deleteAllInfoByPlayer(playerId,db,limitedView)\n\tlocal result = {}\n\tfor _,item in ipairs(self.order) do\n\t\tif tostring(item.pid) == tostring(playerId) then\n\t\t\ttable.insert(result,item.id)\n                system.print(\"deleting: \"..item.id)\n\t\t\titem.id = 0\n\t\tend\n\tend\n\tif (#result <= 0) then return result end\n\tself.current = nil\n\tself:save(db)\n\tself:loadDb(db,limitedView)\n\treturn result\nend\n\nfunction OrderInfo:getAllThreadIds()\n\tlocal result = {}\n\tfor _,item in ipairs(self.order) do\n\t\ttable.insert(result,item.id)\n            system.print(\"checking: \"..item.id)\n\tend\n\treturn result\nend\n\nfunction OrderInfo:getNextUnusedId()\n\tlocal indexed = {}\n\tfor _,item in ipairs(self.order) do\n\t\tindexed[item['id']] = true\n\tend\n\tfor i=1,#indexed,1 do\n\t\tif not indexed[i] then return i end\n\tend\n\treturn #indexed+1\nend\n\nfunction OrderInfo:findFirst()\n\tlocal result = nil\n\tif (#self.filter < 1) then\n\t\tself.current = nil\n\telse\n\t\tself.current = 1\n\t\tresult = self.order[self.filter[self.current]]['id']\n\tend\n\treturn result\nend\n\nfunction OrderInfo:getNext()\n\tif (#self.filter < 1) then\n\t\tself.current = nil\n\t\treturn nil\n\tend\n\tself.current = self.current + 1\n\tif (#self.filter < self.current) then self.current = #self.filter end  \n\tresult = self.order[self.filter[self.current]]['id']\n\treturn result\nend\n\nfunction OrderInfo:getPrevious()\n\tif (#self.filter < 1) then\n\t\tself.current = nil\n\t\treturn nil\n\tend\n\tself.current = self.current - 1\n\tif (self.current < 1) then self.current = 1 end\n\tresult = self.order[self.filter[self.current]]['id']\n\treturn result\nend\n\nThread = {} --made up of multiple messages\nfunction Thread:new(o)\n\to = o or {}\n\tsetmetatable(o, self)\n\tself.__index = self\n\tself.msgs = {}\n\treturn o\nend\n\nfunction Thread:setId(id)\n\tself.id = id\nend\n\nfunction Thread:addMsg(msg)\n\ttable.insert(self.msgs,msg)\nend\n\nfunction Thread:delByPos(pos)\n\tif pos == 1 then return end --do nothing for primary\n\tlocal replacement = {}\n\tfor i,msg in ipairs(self.msgs) do\n\t\tif i ~= pos then \n\t\t\ttable.insert(replacement,self.msgs[i])\n\t\tend    \n\tend\n\tself.msgs = replacement\nend\n\nfunction Thread:delRepliesByPlayerId(playerId)\n\tlocal total = 0\n\tlocal replacement = {}\n\tfor i,msg in ipairs(self.msgs) do\n\t\tif i==1 or tostring(msg.id) ~= tostring(playerId) then \n\t\t\ttable.insert(replacement,self.msgs[i]) --keep\n\t\telse\n\t\t\ttotal = total + 1 --remove\n\t\tend\n\tend\n\tself.msgs = replacement\n\treturn total\nend\n\nfunction Thread:getReplyCountByPlayer()\n\tlocal player = getCurrentPlayerInfo()\n\tlocal playerId = tostring(player.id)\n\tlocal total = 0\n\tlocal replacement = {}\n\tfor i,msg in ipairs(self.msgs) do\n\t\tsystem.print(\">\"..i..\" \"..msg.id..\" vs \"..playerId)\n\t\tif i > 1 and msg.id == playerId then\n\t\t\ttotal = total + 1\n\t\tend\n\tend\n\tprintToConsole(\"Total user replies: \"..total)\n\treturn total\nend\n\nfunction Thread:getPlayerIdAt(pos)\n\tif pos > #self.msgs or pos < 1 then return nil end\n\tlocal msg = self.msgs[pos]\n     local player = PlayerInfo:new()\n     player:getPlayerName(msg.id)\n\tprintToConsole(\"Player found: \" .. tostring(player.name))\n\treturn player\nend\n\nfunction Thread:clearId(db,id)\n\tdb.setStringValue(\"M\"..tostring(id), '')\nend\n\nfunction Thread:save(db)\n\tlocal serialized = self:serialize()\n\tprintToConsole(\"Saving Thread...\"..self.id .. \" \" .. serialized)  \n\tdb.setStringValue(\"M\"..tostring(self.id), serialized)\nend\n\nfunction Thread:loadThread(db)\n\tlocal threadTxt = db.getStringValue(\"M\"..self.id)\n\tself:deserialize(threadTxt)\nend\n\nfunction Thread:delete(db)\n\tdb.setStringValue(\"M\"..tostring(self.id), nil)\nend\n\nfunction Thread:serialize()\n\tlocal result = ''\n\tfor _,msg in ipairs(self.msgs) do\n\t\tif isEmpty(result) then\n\t\t\tresult = msg:serialize()\n\t\telse\n\t\t\tresult = result .. THSEP .. msg:serialize()\n\t\tend\n\tend\n\treturn result\nend\n\nfunction Thread:deserialize(input)\n\tself.msgs = {}\n\tlocal txtEntries = split(input,THSEP)\n\tfor _,txt in ipairs(txtEntries) do\n\t\tlocal msg = Message:new()\n\t\tmsg:deserialize(txt)\n\t\tself:addMsg(msg)\n\tend\nend\n\nfunction Thread:serializeForDisplay()\n\tlocal playerTempCache = PlayerInfo:new()\n\tlocal result = ''\n\tfor _,msg in ipairs(self.msgs) do\n\t\tif isEmpty(result) then\n\t\t\tresult = msg:serializeForDisplay(playerTempCache)\n\t\telse\n\t\t\tresult = result .. THSEP .. msg:serializeForDisplay(playerTempCache)\n\t\tend\n\t end\n\treturn result\nend\n\nMessage = {}\nfunction Message:new(o)\n\to = o or {}\n\tsetmetatable(o, self)\n\tself.__index = self\n\treturn o\nend\n\nfunction Message:set(id,txt,timestamp)\n\tself.id = tostring(id)\n\tself.timestamp = timestamp or math.floor(system.getTime())\n\tself.txt = txt\nend\n\nfunction Message:serializeForDisplay(playerCache)\n\tlocal playerName = playerCache:getPlayerName(self.id)\n\tlocal isCurrentPlayer = isCurrentPlayer(self.id)\n\tlocal readableTimestamp = getReadableTime(self.timestamp)\n\tlocal result = playerName .. SEP .. isCurrentPlayer .. SEP .. readableTimestamp .. SEP .. tokenize(self.txt)\n\treturn result\nend\n\nfunction Message:serialize()\n\tlocal result = self.id .. SEP .. self.timestamp .. SEP .. tokenize(self.txt)\n\treturn result\nend\n\nfunction Message:deserialize(input)\n\tlocal entry = split(input,SEP)\n\tself.id = entry[1]\n\tself.timestamp = entry[2]\n\tself.txt = detokenize(entry[3])\nend\n\nfunction tokenize(txt)\n\tlocal result = txt\n\tresult = replaceStr(result,SEP,COM_TKN)\n\tresult = replaceStr(result,THSEP,SEMI_TKN)\n\treturn result\nend\n\nfunction detokenize(txt)\n\tlocal result = txt\n\tresult = replaceStr(result,COM_TKN,SEP)\n\tresult = replaceStr(result,SEMI_TKN,THSEP)\n\treturn result\nend\n\nfunction replaceStr(txt,oldStr,replaceStr)\n\tlocal result = txt:gsub(oldStr,replaceStr)\n\treturn result\nend\n\nfunction split(txt,sep)\n\tlocal result = {}\n\tfor w in string.gmatch(txt,\"([^\"..sep..\"]+)\") do \n\t\tresult[#result+1] = w\n\tend\n\treturn result\nend\n\nfunction isEmpty(s)\n\treturn s == nil or s == ''\nend\n\nfunction startsWith(text, prefix)\n\treturn text:find(prefix, 1, true) == 1\nend\n\nfunction getRenderScript(const)\n    return [[\nVERSION = ]] .. const.version .. [[ \nTITLE = \"]] .. const.title .. [[\"\nCHAR_LIMIT = ]] .. const.msgCharLimit .. [[\n\nif not Scrollbar then\n\tlocal scrollbar = {}\n\tscrollbar.__index = scrollbar\n\tfunction Scrollbar(props, attr )\n\t\tself = {}\n\t\tself.x = attr.x or 0\n\t\tself.y = attr.y or 0\n\t\tself.l = attr.length or 100\n\t\tself.w = attr.width or 20\n\t\tself.min = attr.min or 0\n\t\tself.max = attr.max or 1\n\t\tself.value = math.max(self.min, math.min(self.max, attr.defaultValue)) or self.min\n\t\tself.doDrag = false\n\t\tself.buttonH = self.w*6\n\t\treturn setmetatable(self, scrollbar)\n\tend\n\t\n\tfunction scrollbar:getFraction()\n\t\treturn (self.value - self.min) / (self.max - self.min)\n\tend\n\t\n\tfunction scrollbar:setValue(val)\n\t\tself.value = math.max(self.min, math.min(self.max, val))\n\tend\n\n\tfunction scrollbar:draw(layer)\n\t\tlocal cx, cy = getCursor()\n\t\tlocal cPressed = getCursorPressed()\n\t\tlocal cReleased = getCursorReleased()\n\t\t\n\t\tif cPressed and cx >= self.x and cx <= (self.x + self.w) and cy >= self.y + (self.l-self.buttonH) - (self:getFraction() * (self.l-self.buttonH)) and cy <= self.y + self.buttonH + (self.l-self.buttonH) - (self:getFraction() * (self.l-self.buttonH)) then\n\t\t\tself.doDrag = true\n\t\telseif cReleased == true or cx == -1 then\n\t\t\tself.doDrag = false\n\t\tend\n\t\t\n\t\tif self.doDrag then\n\t\t\tlocal vy = 1 - ((cy - self.y) / self.l)\n\t\t\tself:setValue(self.min + ((self.max - self.min) * vy))  \n\t\tend\n\t\t \n\t\tsetNextFillColor(layer, props.primeCol[1], props.primeCol[2], props.primeCol[3], 0.6)\n\t\taddBoxRounded(layer, self.x, self.y, self.w, self.l, math.min(self.w / 10, self.l / 10))\n\t\t\n\t\tif self.doDrag then\n\t\t\tsetNextFillColor(layer, props.highlightCol[1], props.highlightCol[2], props.highlightCol[3], 0.9)\n\t\telse\n\t\t\tsetNextFillColor(layer, props.textCol[1], props.textCol[2], props.textCol[3], 0.9)\n\t\tend\n\t\taddBoxRounded(layer, self.x, self.y + (self.l-self.buttonH) - (self:getFraction() * (self.l-self.buttonH)), self.w, self.buttonH, math.min(self.w / 10, self.l / 10))\n\tend\nend\n\n-- render script helpers\nif not Config then\n\tConfig = {}\n\tfunction Config:new(o)\n\t\to = o or {}\n\t\tsetmetatable(o, self)\n\t\tself.__index = self\n\t\treturn o\n\tend\n\n\tfunction Config:init()\n\t\tself.timestamp = 0\n\t\tself.pageNum = 1\n\t\tself.maxPage = 1\n\t\tself.action = ''\n\t\tself.mode = 0\n\t\tself.rights = 0\n\t\tself.newMsgOn = 0\n\t\tself.replyOn = 0\n\t\tself.promoted = 0\n\t\tself.showall = 0\n\t\tself.msg = {}\n\tend\n\n\tfunction Config:readInput()\n\t\tlocal input = getInput()\n\t\tif (input ~= nil or input ~= '') then\n\t\t\tself.msg = {}\n\t\t\tlocal temp = split(input,THSEP)\n\t\t\tfor i,k in ipairs(temp) do\n\t\t\t\tif (i==1) then --header\n\t\t\t\t\tlocal line = split(k,SEP)\n\t\t\t\t\tself.timestamp = tonumber(line[1])\n\t\t\t\t\tself.pageNum = tonumber(line[2])\n\t\t\t\t\tself.maxPage = tonumber(line[3])\n\t\t\t\t\tself.mode = tonumber(line[4])\n\t\t\t\t\tself.rights = tonumber(line[5])\n\t\t\t\t\tself.newMsgOn = tonumber(line[6])\n\t\t\t\t\tself.replyOn = tonumber(line[7])\n\t\t\t\t\tself.promoted = tonumber(line[8])\n\t\t\t\t\tself.showall = tonumber(line[9])\n\t\t\t\t\tself.action = line[10]\n\t\t\t\telse\n\t\t\t\t\tlocal msgline = split(k,SEP)\n\t\t\t\t\ttable.insert(self.msg,msgline) --see getMessageParams\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\n\tfunction Config:isActive()\n\t\treturn self.mode == MODE_ACTIVE\n\tend\n\n\tfunction Config:isRights(right)\n\t\treturn self.rights == right\n\tend\n\n\tfunction Config:hasPrev()\n\t\treturn self.pageNum ~= nil and self.pageNum > 1\n\tend\n\n\tfunction Config:hasNext()\n\t\treturn self.pageNum ~= nil and self.maxPage ~= nil and self.pageNum < self.maxPage\n\tend\n\n\tfunction Config:hasMessages()\n\t\treturn #self.msg > 0\n\tend\n\n\tfunction Config:allowNewMsg()\n\t\treturn self.newMsgOn ~= nil and self.newMsgOn > 0\n\tend\n\n\tfunction Config:allowReply()\n\t\treturn self.replyOn ~= nil and self.replyOn > 0\n\tend\n\n\tfunction Config:getMessageContent(i,h,align)\n\t\tif i > #self.msg then i = #self.msg end\n\t\tif i < 1 then i = 1 end\n\t\tlocal tbl = self.msg[i]\n\t\tlocal name = tbl[1]\n\t\tlocal isSame = tbl[2]\n\t\tlocal timestamp = tbl[3]\n\t\tlocal txt = tbl[4]\n\t\tlocal content = {\n\t\t\ttitle=name,\n\t\t\tsubText=timestamp,\n\t\t\ttext=detokenize(txt)\n\t\t}\n\t\tlocal attr = {\n\t\t\t\tx = props.xpad*2,\n\t\t\t\ty = h,\n\t\t\t\tw = props.boxw\n\t\t\t} -- left\n\t\tif (align == 'r' or tonumber(isSame)==1) then\n\t\t\tattr = {\n\t\t\t\tx = props.maxx-props.xpad*3-props.boxw,\n\t\t\t\ty = h,\n\t\t\t\tw = props.boxw\n\t\t\t} -- right\n\t\tend   \n\t\tif (align == 'c') then\n\t\t\tattr = getCenterBoxAttr(props,h)\n\t\tend    \n\t\tif (self:isRights(RIGHTS_FULL) or (self:isRights(RIGHTS_ADDREAD_DELSELF) and tonumber(isSame)==1)) and self:isActive() then\n\t\t\tattr['del']=i\n\t\tend\n\t\tif (i == 1 and self:isRights(RIGHTS_FULL)) then\n\t\t\tattr['canPromote']=true\n\t\t\tattr['promoted']=(self.promoted==1)\n\t\t\tif self.showall >= 0 then \n\t\t\t\tattr['canShowAll']=true\n\t\t\t\tattr['isShowAll']=(self.showall==1)\n\t\t\tend\n\t\tend\n\t\treturn content,attr\n\tend\nend\n\nif not ActionHandler then\n\tActionHandler = {}\n\tfunction ActionHandler:new(o)\n\t   o = o or {}\n\t   setmetatable(o, self)\n\t   self.__index = self\n\t   return o\n\tend\n\n\tfunction ActionHandler:init(config)\n\t\tself.actionTbl = {}\n\t\tself.dialogText = {}\n\t\tself.dialogType = {}\n\t\tself.config = config\n\tend\n\n\tfunction ActionHandler:update(action,x,y,w,h)\n\t\tself.actionTbl[action] = {x,y,x+w,y+h}\n\tend\n\n\tfunction ActionHandler:isAction(action)\n\t\treturn GLOBAL_ACTION == action\n\tend\n\n\tfunction ActionHandler:setDialogType(action,dtype)\n\t\tself.dialogType[action] = dtype\n\tend\n\n\tfunction ActionHandler:tick()\n\t\tif DIALOG_UP ~= '' and not config:isActive() then\n\t\t\tDIALOG_UP = ''\n\t\tend\n\t\tif (getCursorReleased() and GLOBAL_ACTION == '') then\n\t\t\tDIALOG_UP = ''\n\t\tend\n\t\tif (getCursorReleased()) then\n\t\t\tGLOBAL_ACTION = ''\n\t\tend        \n\t\tif (LAST_CLICK ~= config.timestamp) then\n\t\t\tsetOutput('')\n\t\t\tDIALOG_UP = ''\n\t\tend    \n\t\tif (getCursorPressed()) then \n\t\t\tlocal action = self:findAction(self.actionTbl)\n\t\t\tGLOBAL_ACTION = action\n\t\t\tsetOutput(action)\n\t\t\tif (action ~= '') then\n\t\t\t\tlogMessage('Action '..action)\n\t\t\t\tDIALOG_UP = action\n\t\t\tend\n\t\t\tLAST_CLICK = config.timestamp\n\t\tend\n\tend\n\n\tfunction ActionHandler:findAction(actionTbl)\n\t\tlocal cx,cy = getCursor() \n\t\tlocal result = '';\n\t\tfor action,square in pairs(actionTbl) do\n\t\t\tif (cx > square[1] and cx < square[3] and cy > square[2] and cy < square[4]) then\n\t\t\t\treturn action\n\t\t\tend    \n\t\tend\n\t\treturn result\n\tend\n\n\tfunction ActionHandler:addDialogText(action,text)\n\t\tself.dialogText[action] = text\n\tend\n\n\tfunction ActionHandler:handleDialog()\n\t\tlocal del = startsWith(DIALOG_UP,'del')\n\t\tif self.dialogText[DIALOG_UP] == nil and not del then return end\n\t\tlocal prefix = DIALOG_UP\n\t\tif del then\n\t\t\tprefix = 'del'\n\t\tend   \n\t\tlocal text = self.dialogText[prefix]\n\t\tlocal layer = createLayer()\n\t\tsetDefaultFillColor(layer,Shape_Box,props.shadowCol[1],props.shadowCol[2],props.shadowCol[3],0.8)\n\t\taddBox(layer,0,0,props.maxx,props.maxy)\n\t\tlocal attr = getCenterBoxAttr(props,props.maxy/3.5)\n\t\tlocal dtype = self.dialogType[prefix]\n\t\tattr['icon'] = INFO_BOX\n\t\tlocal content = {\n\t\t\ttitle = 'Information',\n\t\t\tsubText = 'Click anywhere to continue',\n\t\t\ttext = text\n\t\t}\n\t\tif dtype ~= nil and dtype == WARN_BOX then\n\t\t\tattr['icon'] = WARN_BOX\n\t\t\tcontent = {\n\t\t\t\ttitle = 'Warning',\n\t\t\t\tsubText = 'Click anywhere to continue',\n\t\t\t\ttext = text\n\t\t\t}\n\t\tend   \n\t\taddMsgBox(layer,props,content,attr)\n\tend\nend\n\nif not functionsLoaded then\n\tfunctionsLoaded = true\n\tfunction getCenterBoxAttr(props,h)\n\t\treturn {\n\t\t\tx = props.maxx/2-props.boxw/2,\n\t\t\ty = h,\n\t\t\tw = props.boxw\n\t\t}\n\tend    \n\tfunction detokenize(txt)\n\t\tlocal result = txt\n\t\tresult = replaceStr(result,COM_TKN,SEP)\n\t\tresult = replaceStr(result,SEMI_TKN,THSEP)\n\t\treturn result\n\tend\n\tfunction replaceStr(txt,oldStr,replaceStr)\n\t\tlocal result = txt:gsub(oldStr,replaceStr)\n\t\treturn result\n\tend\n\tfunction split(txt,sep)\n\t\tlocal result = {}\n\t\tfor w in string.gmatch(txt,'([^'..sep..']+)') do \n\t\t\tresult[#result+1] = w\n\t\tend\n\t\treturn result\n\tend\n\tfunction startsWith(str,strt)\n\t\treturn string.sub(str,1,string.len(strt))==strt\n\tend\n\n\tfunction handleGlobalFontCache()\n\t\tif not fontLoaded then\n\t\t\tfontLoaded = true\n\t\t\tlocal textFontSize = props.fontsize\n\t\t\ticonFont = loadFont(props.font, textFontSize+7)\n\t\t\theaderFont = loadFont(props.font, textFontSize+2)\n\t\t\tsubHeaderFont = loadFont(props.font, textFontSize - 4)\n\t\t\ttextFont = loadFont(props.font, textFontSize)\n\t\tend\n\tend\n\n\tfunction addPageCounter(layer,x,y)\n\t\tif (config.pageNum == nil) then return end\n\t\thandleGlobalFontCache()\n\t\tlocal text = config.pageNum .. '/' .. config.maxPage\n\t\tsetDefaultFillColor(layer, Shape_Text,props.shadowCol[1],props.shadowCol[2],props.shadowCol[3], 1)\n\t\tsetNextTextAlign(layer,AlignH_Center,AlignV_Top)\n\t\taddText(layer, iconFont, text, x+1, y+1)\n\t\tsetDefaultFillColor(layer, Shape_Text, props.textCol[1],props.textCol[2],props.textCol[3], 1)\n\t\tsetNextTextAlign(layer,AlignH_Center,AlignV_Top)\n\t\taddText(layer, iconFont, text, x, y)\n\tend\n\n\tfunction addPromote(layer,props,attr)\n\t\tlocal x = attr.x\n\t\tlocal y = attr.y\n\t\tlocal h = attr.h\n\t\tlocal promoted = attr.promoted\n\t\tlocal action = 'promote'\n\t\tlocal l = h/16\n\t\tactionHandler:update(action,x,y,h,h)\n\t\tsetDefaultFillColor(layer, Shape_Polygon,props.secondaryCol[1],props.secondaryCol[2],props.secondaryCol[3],1/3)\n\t\tif actionHandler:isAction(action) then\n\t\t\tsetDefaultStrokeColor(layer,Shape_Polygon,props.highlightCol[1],props.highlightCol[2],props.highlightCol[3],1)\n\t\telseif promoted then\n\t\t\tsetDefaultStrokeColor(layer,Shape_Polygon,props.textHighlightCol[1],props.textHighlightCol[2],props.textHighlightCol[3],1)\n\t\t\tsetDefaultFillColor(layer, Shape_Polygon,props.highlightCol[1],props.highlightCol[2],props.highlightCol[3],1/3)\n\t\telse\n\t\t\tsetDefaultStrokeColor(layer,Shape_Polygon,props.textCol[1],props.textCol[2],props.textCol[3],1)\n\t\tend\n\t\tsetDefaultStrokeWidth(layer,Shape_Polygon,l) \n\t\taddTriangle(layer, x+l*8,y+l,x+l,y+h-l,x+h-l,y+h-l)\n\tend\n\t\n\tfunction addShowAll(layer,props,attr)\n\t\tlocal x = attr.x\n\t\tlocal y = attr.y\n\t\tlocal h = attr.h\n\t\tlocal showall = attr.isShowAll\n\t\tlocal action = 'showall'\n\t\tlocal l = h/16\n\t\tactionHandler:update(action,x,y,h,h)\n\t\tsetDefaultFillColor(layer, Shape_Polygon,props.secondaryCol[1],props.secondaryCol[2],props.secondaryCol[3],1/3)\n\t\tif actionHandler:isAction(action) then\n\t\t\tsetDefaultStrokeColor(layer,Shape_Polygon,props.highlightCol[1],props.highlightCol[2],props.highlightCol[3],1)\n\t\telseif showall then\n\t\t\tsetDefaultStrokeColor(layer,Shape_Polygon,props.textHighlightCol[1],props.textHighlightCol[2],props.textHighlightCol[3],1)\n\t\t\tsetDefaultFillColor(layer, Shape_Polygon,props.highlightCol[1],props.highlightCol[2],props.highlightCol[3],1/3)\n\t\telse\n\t\t\tsetDefaultStrokeColor(layer,Shape_Polygon,props.textCol[1],props.textCol[2],props.textCol[3],1)\n\t\tend\n\t\tsetDefaultStrokeWidth(layer,Shape_Polygon,l) \n\t\taddQuad(layer, x+l*8,y+l,x+h-l,y+l*8,x+l*8,y+h-l,x+l,y+l*8)\n\tend\n\t\n\tfunction addTrash(layer,props,attr)\n\t\tlocal x = attr.x\n\t\tlocal y = attr.y\n\t\tlocal h = attr.h\n\t\tlocal delAction = 'del_'..attr.del\n\t\tlocal l = h/16\n\t\tactionHandler:update(delAction,x,y,h,h)\n\t\tif actionHandler:isAction(delAction) then\n\t\t\tsetDefaultStrokeColor(layer,Shape_Line,props.highlightCol[1],props.highlightCol[2],props.highlightCol[3],1)\n\t\telse\n\t\t\tsetDefaultStrokeColor(layer,Shape_Line,props.textCol[1],props.textCol[2],props.textCol[3],1)\n\t\tend\n\t\tsetDefaultStrokeWidth(layer,Shape_Line,l)\n\t\taddLine(layer, x+l*2, y+l*2, x+l*11, y+l*2)\n\t\taddLine(layer, x+l*5, y+l, x+l*8, y+l)\n\t\taddLine(layer, x+l*3, y+l*15, x+l*10, y+l*15)\n\t\taddLine(layer, x+l*3, y+l*3, x+l*3, y+l*15)\n\t\taddLine(layer, x+l*10, y+l*3, x+l*10, y+l*15)\n\t\taddLine(layer, x+l*5, y+l*6, x+l*5, y+l*12)\n\t\taddLine(layer, x+l*8, y+l*6, x+l*8, y+l*12)\n\tend    \n\n\tfunction addMsgBox(layer,props,content,attr)\n\t\tlocal x = attr.x\n\t\tlocal y = attr.y\n\t\tlocal w = attr.w\n\t\tlocal icon = attr.icon\n\t\tlocal textFontSize = props.fontsize\n\t\tlocal textPad = props.textpad\n\t\tlocal headerFontSize = props.fontsize + 2\n\t\tlocal subHeaderFontSize = headerFontSize - 6\n\t\thandleGlobalFontCache() \n\t\tlocal iconW = 0\n\t\tlocal iconH = 0\n\t\tlocal iconText = \"i\"\n\t\tif icon ~= nil and icon == WARN_BOX then iconText = \"!\" end\n\t\tif (icon ~= nil) then\n\t\t\ticonW, iconH = getTextBounds(iconFont, iconText)\n\t\t\ticonW = iconW + props.xpad*4\n\t\t\tw = w - iconW\n\t\t\ticonH = props.ypad*4 + iconH\n\t\tend   \n\t\tlocal textlines = rslib.getTextWrapped(textFont,content.text,w-props.xpad*2-iconW)\n\t\tlocal headerH = headerFontSize+props.ypad*3\n\t\tlocal textBoxh = props.ypad*3+(#textlines*(textFontSize+textPad))\n\t\tif icon ~= nil then\n\t\t\tif iconH+props.ypad > textBoxh then textBoxh = iconH+props.ypad end\n\t\tend\n\n\t\tif (attr.nodraw ~= nil) then return textBoxh+headerH end\n\n\t\tsetDefaultFillColor(layer, Shape_BoxRounded,props.secondaryCol[1],props.secondaryCol[2],props.secondaryCol[3],1/3)\n\t\taddBoxRounded(layer,x,y,w,textBoxh+headerH,props.xpad)\n\t\tsetDefaultFillColor(layer, Shape_BoxRounded,props.primeCol[1],props.primeCol[2],props.primeCol[3],1/2)\n\t\taddBoxRounded(layer,x,y+headerH,w,textBoxh,props.xpad)\n\n\t\tif (icon ~= nil and icon == INFO_BOX) then\n\t\t\tsetNextStrokeColor(layer, Shape_Circle,props.textCol[1],props.textCol[2],props.textCol[3],1)\n\t\t\tsetNextFillColor(layer,Shape_Circle,0,0,0,0)\n\t\t\tsetNextStrokeWidth(layer,Shape_Circle,3)\n\t\t\tlocal ix = x+iconW/2+props.xpad/2 \n\t\t\tlocal iy = y+headerH+iconH/2+props.ypad/2\n\t\t\taddCircle(layer,ix,iy,iconH/2-props.xpad/2)\n\t\t\t\n\t\t\tsetNextFillColor(layer,Shape_Text,props.textCol[1],props.textCol[2],props.textCol[3],1)\n\t\t\tsetNextTextAlign(layer,AlignH_Center,AlignV_Middle)\n\t\t\taddText(layer, iconFont, iconText, ix, iy)\n\t\tend\n\t\t \n\t\tif (icon ~= nil and icon == WARN_BOX) then\n\t\t\tsetDefaultStrokeColor(layer,Shape_Polygon,props.highlightCol[1],props.highlightCol[2],props.highlightCol[3],1)\n\t\t\tsetNextFillColor(layer,Shape_Polygon,0,0,0,0)\n\t\t\tsetNextStrokeWidth(layer,Shape_Polygon,3)\n\t\t\tlocal rx = iconW/2-props.xpad\n\t\t\tlocal ry = iconH/2-props.ypad\n\t\t\tlocal ix = x+rx+props.xpad+props.xpad/2\n\t\t\tlocal iy = y+headerH+ry+props.ypad+props.ypad/2\n\t\t\taddTriangle(layer, ix, iy-ry, ix-rx, iy+ry, ix+rx, iy+ry)\n\t\t\t\n\t\t\tsetDefaultFillColor(layer,Shape_Text,props.highlightCol[1],props.highlightCol[2],props.highlightCol[3],1)\n\t\t\tsetNextTextAlign(layer,AlignH_Center,AlignV_Middle)\n\t\t\taddText(layer, iconFont, iconText, ix, iy)\n\t\t end\n\t\t\n\t\tsetDefaultFillColor(layer, Shape_Text,props.shadowCol[1],props.shadowCol[2],props.shadowCol[3],1)\n\t\tsetNextTextAlign(layer,AlignH_Left,AlignV_Top)\n\t\taddText(layer, headerFont, content.title, x+props.xpad+1, y+props.ypad*2+1)\n\t\tif (icon ~= nil and icon == WARN_BOX) then\n\t\t\tsetDefaultFillColor(layer, Shape_Text, props.highlightCol[1],props.highlightCol[2],props.highlightCol[3], 1)\n\t\telse   \n\t\t\tsetDefaultFillColor(layer, Shape_Text, props.textCol[1],props.textCol[2],props.textCol[3], 1)\n\t\tend\n\t\tsetNextTextAlign(layer,AlignH_Left,AlignV_Top)\n\t\taddText(layer, headerFont, content.title, x+props.xpad, y+props.ypad*2)\n\n\t\tlocal butH = headerFontSize\n\t\tlocal subTextX = x+w-props.xpad\n\t\tif (attr.del ~= nil and config:isActive()) then\n\t\t\tsubTextX = subTextX-butH-props.xpad\n\t\t\tlocal tattr = {\n\t\t\t\tx = subTextX+props.xpad,\n\t\t\t\ty = y+props.ypad*2,\n\t\t\t\th = butH,\n\t\t\t\tdel = attr.del\n\t\t\t}\n\t\t\taddTrash(layer,props,tattr)\n\t\tend\n\t\tif (attr.canShowAll and config:isActive()) then\n\t\t\tsubTextX = subTextX-butH-props.xpad\n\t\t\tlocal saattr = {\n\t\t\t\tx = subTextX+props.xpad,\n\t\t\t\ty = y+props.ypad*2,\n\t\t\t\th = butH,\n\t\t\t\tisShowAll = attr.isShowAll\n\t\t\t}\n\t\t\taddShowAll(layer,props,saattr)\n\t\tend\n\t\tif (attr.canPromote and config:isActive()) then\n\t\t\tsubTextX = subTextX-butH-props.xpad\n\t\t\tlocal pattr = {\n\t\t\t\tx = subTextX+props.xpad,\n\t\t\t\ty = y+props.ypad*2,\n\t\t\t\th = butH,\n\t\t\t\tpromoted = attr.promoted\n\t\t\t}\n\t\t\taddPromote(layer,props,pattr)\n\t\tend\n\t\t\n\t\tsetDefaultFillColor(layer, Shape_Text,props.shadowCol[1],props.shadowCol[2],props.shadowCol[3],1)\n\t\tsetNextTextAlign(layer,AlignH_Right,AlignV_Top)\n\t\taddText(layer, subHeaderFont, content.subText, subTextX+1, y+props.ypad*2+1+(headerFontSize-subHeaderFontSize))\n\t\tsetDefaultFillColor(layer, Shape_Text, props.textCol[1],props.textCol[2],props.textCol[3], 1)\n\t\tsetNextTextAlign(layer,AlignH_Right,AlignV_Top)\n\t\taddText(layer, subHeaderFont, content.subText, subTextX, y+props.ypad*2+(headerFontSize-subHeaderFontSize))\n\n\t\tfor i,line in ipairs(textlines) do\n\t\t\tlocal ly = headerH+y+props.ypad*2 + (textFontSize+textPad)*(i-1)\n\t\t\tsetDefaultFillColor(layer, Shape_Text,props.shadowCol[1],props.shadowCol[2],props.shadowCol[3], 1)\n\t\t\tsetNextTextAlign(layer,AlignH_Left,AlignV_Top)\n\t\t\taddText(layer, textFont, line, x+props.xpad+1+iconW, ly+1)\n\t\t\tsetDefaultFillColor(layer, Shape_Text, props.textCol[1],props.textCol[2],props.textCol[3], 1)\n\t\t\tsetNextTextAlign(layer,AlignH_Left,AlignV_Top)\n\t\t\taddText(layer, textFont, line, x+props.xpad+iconW, ly)\n\t\tend\n\t\treturn textBoxh+headerH\n\tend\n\n\tfunction addButton(layer,props,attr)\n\t\tif not buttonFontLoaded then\n\t\t\tbuttonFontLoaded = true\n\t\t\tbuttonFont = loadFont(props.font, props.buttonfontsize)\n\t\tend\n\t\tlocal action = attr.action\n\t\tlocal text = attr.text\n\t\tlocal alignh = attr.alignh or AlignH_Left\n\t\tlocal x = attr.x\n\t\tlocal y = attr.y\n\t\tlocal wordW, wordH = getTextBounds(buttonFont, text)\n\t\tlocal w = wordW+props.xpad*2\n\t\tlocal h = props.buttonfontsize+props.ypad*2\n\t\t\n\t\tif (alignh == AlignH_Center) then\n\t\t\t x = x - w/2\n\t\t end\n\t\tif (alignh == AlignH_Right) then\n\t\t\t x = x - w\n\t\tend\n\t\t\n\t\tactionHandler:update(action,x,y,w,h)\n\t\tif actionHandler:isAction(action) then\n\t\t\tsetDefaultFillColor(layer,Shape_BoxRounded,props.highlightCol[1],props.highlightCol[2],props.highlightCol[3],2/3)\n\t\telse\n\t\t\tsetDefaultFillColor(layer,Shape_BoxRounded,props.primeCol[1],props.primeCol[2],props.primeCol[3],1/3)\n\t\tend  \n\t\taddBoxRounded(layer,x,y,w,h,props.xpad)\n\t\tsetDefaultFillColor(layer, Shape_Text,props.shadowCol[1],props.shadowCol[2],props.shadowCol[3],1)\n\t\tsetNextTextAlign(layer,AlignH_Left,AlignV_Top)\n\t\taddText(layer, buttonFont, text, x+props.xpad+1, y+props.ypad*2+1)\n\t\tif actionHandler:isAction(action) then\n\t\t\tsetDefaultFillColor(layer,Shape_Text,props.textHighlightCol[1],props.textHighlightCol[2],props.textHighlightCol[3],1)\n\t\telse    \n\t\t\tsetDefaultFillColor(layer, Shape_Text, props.textCol[1],props.textCol[2],props.textCol[3], 1)\n\t\tend           \n\t\tsetNextTextAlign(layer,AlignH_Left,AlignV_Top)\n\t\taddText(layer, buttonFont, text, x+props.xpad, y+props.ypad*2)\n\t\treturn w,h\n\tend\nend\n\nif not init then\n\tinit = true\n\trslib = require('rslib')\n\tlocal maxx,maxy = getResolution()\n\tprops = {\n\t\tmaxx = maxx,\n\t\tmaxy = maxy,\n\t\txpad = maxx/100,\n\t\typad = maxy/100,\n\t\tboxw = maxx/1.2,\n\t\tfontsize = maxy/30,\n\t\tbuttonfontsize = maxy/15,\n\t\ttextpad = 2,\n\t\tfont = 'RobotoMono',\n\t\tprimeCol = {55/255,55/255,200/255},\n\t\tsecondaryCol = {20/255,20/255,100/255},\n\t\thighlightCol = {200/255,200/255,55/255},\n\t\tshadowCol = {0,0,0},\n\t\ttextCol = {240/255,240/255,1},\n\t\ttextHighlightCol = {1,1,240/255},\n\t}\n\tMODE_INACTIVE = 0\n\tMODE_ACTIVE = 1\n\tRIGHTS_READONLY = 0\n\tRIGHTS_FULL = 1\n\tRIGHTS_ADDREADONLY = 2\n\tRIGHTS_ADDREAD_DELSELF = 3\n\tTHSEP = ';'\n\tSEP = ','\n\tCOM_TKN = \"\\\\C\\\\\"\n\tSEMI_TKN = \"\\\\S\\\\\"\n\t\n\tGLOBAL_ACTION = ''\n\tLAST_CLICK = 0\n\tDIALOG_UP = ''\n\tINFO_BOX = 0\n\tWARN_BOX = 1\n\t\n\tconfig = Config:new()\n\tconfig:init()\n\tactionHandler = ActionHandler:new()\n\tactionHandler:init(config)\n\tactionHandler:addDialogText('newMsg','Open the Lua tab and type in a message of up to '..CHAR_LIMIT..' characters.')\n\tactionHandler:setDialogType('newMsg',INFO_BOX)\n\tactionHandler:addDialogText('reply','Open the Lua tab and type in your reply of up to '..CHAR_LIMIT..' characters.')\n\tactionHandler:setDialogType('reply',INFO_BOX)\n\tactionHandler:addDialogText('del','Open the Lua tab and type Y to confirm message deletion')\n\tactionHandler:setDialogType('del',WARN_BOX)\n\tactionHandler:addDialogText('promote','Open the Lua tab and type Y to confirm showing this message on front screen')\n\tactionHandler:setDialogType('promote',INFO_BOX)\n\t\n\tlocal attr = {\n\t\tx = props.maxx-props.xpad*2,\n\t\ty = 0,\n\t\tlength = props.maxy-props.buttonfontsize-props.ypad*6,\n\t\twidth = props.xpad*2,\n\t\tmin = 0,\n\t\tmax = 1,\n\t\tdefaultValue = 1\n\t\t}\n\tscrollbar = Scrollbar(props,attr)\nend\nconfig:readInput()\nif (config:isRights(RIGHTS_FULL)) then\n\tactionHandler:addDialogText('del','Open the Lua tab and type Y to confirm message deletion. Type A to purge all messages and replies for that user.')\nend\nfontLoaded = false\nbuttonFontLoaded = false\n\nlocal maxx = props.maxx\nlocal maxy = props.maxy\nlocal xpad = maxx/100\nlocal ypad = maxy/100\nlocal fontsize = maxx/20\nif (xpad < 1) then xpad = 1 end\nif (ypad < 1) then ypad = 1 end\n\nlocal backgroundLayer = createLayer()\nlocal msgLayer = createLayer()\nlocal scrollLayer = createLayer()\nlocal buttonLayer = createLayer()\n\n--background\nlocal pic = loadImage('gui/screen_unit/img/BG_propaganda_poster.png')\naddImage(backgroundLayer, pic, 0, 0, maxx, maxy)\n\n--deactivated screen contents\nif (not config:isActive()) then\n\tlocal titleFont = loadFont('RobotoMono-Bold', fontsize)\n\tlocal text = TITLE\n\tsetDefaultFillColor(backgroundLayer, Shape_Text, 0, 0, 0, 1)\n\tsetNextTextAlign(backgroundLayer,AlignH_Center,AlignV_Top)\n\taddText(backgroundLayer, titleFont, text, maxx/2+3, ypad*5+3)\n\tsetDefaultFillColor(backgroundLayer, Shape_Text, props.primeCol[1],props.primeCol[2],props.primeCol[3],1)\n\tsetNextTextAlign(backgroundLayer,AlignH_Center,AlignV_Top)\n\taddText(backgroundLayer, titleFont, text, maxx/2, ypad*5)\n\n\tlocal subtitleFont = loadFont('RobotoMono', fontsize/1.5)\n\ttext = 'Activate board to leave a message'\n\tsetDefaultFillColor(backgroundLayer, Shape_Text, 0, 0, 0, 1)\n\tsetNextTextAlign(backgroundLayer,AlignH_Center,AlignV_Bottom)\n\taddText(backgroundLayer, subtitleFont, text, maxx/2+2, maxy-ypad*3+2)\n\tsetDefaultFillColor(backgroundLayer, Shape_Text, props.textCol[1],props.textCol[2],props.textCol[3],1)\n\tsetNextTextAlign(backgroundLayer,AlignH_Center,AlignV_Bottom)\n\taddText(backgroundLayer, subtitleFont, text, maxx/2, maxy-ypad*3)\nend\n\n-- display first message if available on inactive screen\nif (not config:isActive() and config:hasMessages()) then\n\tlocal content,attr = config:getMessageContent(1,props.maxy/3.5,'c')\n\taddMsgBox(msgLayer,props,content,attr)\nend\n\nif (config:isActive() and config:hasMessages()) then\n\tlocal content = {}\n\tlocal attr = {}\n\tlocal h = 0\n\tlocal totalH = props.ypad*2\n\tlocal boxSize = {}\n\t--calculate final Total\n\tfor i=1,#config.msg,1 do\n\t\tcontent,attr = config:getMessageContent(i,totalH)\n\t\tattr['nodraw'] = true\n\t\th = addMsgBox(msgLayer,props,content,attr)\n\t\ttotalH = totalH + props.xpad*2 + h\n\t\tboxSize[i] = h\n\tend\n\tlocal finalTotal = totalH - props.maxy + props.buttonfontsize + props.ypad*6\n\t--draw those in viewport\n\ttotalH = props.ypad*2 - finalTotal + scrollbar:getFraction() * finalTotal\n\tfor i=1,#config.msg,1 do\n\t\tcontent,attr = config:getMessageContent(i,totalH)\n\t\tif boxSize[i]+totalH < 0 or totalH > props.maxy then\n\t\t\tattr['nodraw'] = true\n\t\tend    \n\t\th = addMsgBox(msgLayer,props,content,attr)\n\t\ttotalH = totalH + props.xpad*2 + h\n\tend\nend\n\nif (config:isActive() and not config:hasMessages()) then\n\tlocal content = {\n\t\ttitle = 'Welcome',\n\t\tsubText = '',\n\t\ttext = 'There are no messages.  Add a new message by clicking the button below.'\n\t}\n\tlocal attr = getCenterBoxAttr(props,props.maxy/3.5)\n\taddMsgBox(msgLayer,props,content,attr)\nend\n--button layer\nif config:isActive() then\n\tsetDefaultFillColor(buttonLayer,Shape_BoxRounded,props.secondaryCol[1],props.secondaryCol[2],props.secondaryCol[3],1/3)\n\taddBoxRounded(buttonLayer,0,props.maxy-props.buttonfontsize-props.ypad*6,maxx,props.buttonfontsize+props.ypad*6,props.xpad)\n\tif config:hasPrev() then\n\t\tattr = {\n\t\t\taction = 'prev',\n\t\t\ttext = 'Prev',\n\t\t\tx = props.xpad,\n\t\t\ty = props.maxy-props.buttonfontsize-props.ypad*5,\n\t\t}\n\t\taddButton(buttonLayer,props,attr)\n\tend\n\taddPageCounter(buttonLayer,props.maxx/3,props.maxy-props.fontsize-7-props.ypad*4)\n\tif config:allowNewMsg() then\n\t\tattr = {\n\t\t\taction = 'newMsg',\n\t\t\ttext = 'New Message',\n\t\t\tx = props.maxx/2,\n\t\t\ty = props.maxy-props.buttonfontsize-props.ypad*5,\n\t\t\talignh = AlignH_Center,\n\t\t}\n\t\taddButton(buttonLayer,props,attr)\n\tend\n\tif config:allowReply() then\n\t\tattr = {\n\t\t\taction = 'reply',\n\t\t\ttext = 'Reply',\n\t\t\tx = props.maxx-props.maxx/4,\n\t\t\ty = props.maxy-props.buttonfontsize-props.ypad*5,\n\t\t\talignh = AlignH_Center,\n\t\t}\n\t\taddButton(buttonLayer,props,attr)\n\tend\n\tif config:hasNext() then\n\t\tattr = {\n\t\t\taction = 'next',\n\t\t\ttext = 'Next',\n\t\t\tx = props.maxx-props.xpad,\n\t\t\ty = props.maxy-props.buttonfontsize-props.ypad*5,\n\t\t\talignh = AlignH_Right,\n\t\t}\n\t\taddButton(buttonLayer,props,attr)\n\tend    \nend\n\nif (config:isActive()) then\n\tscrollbar:draw(scrollLayer)\n\tactionHandler:handleDialog()\n\tactionHandler:tick()\n\trequestAnimationFrame(1)\nend\n\n--version\nlocal layer = createLayer()\nfont = loadFont('Play-Bold', 14)\nsetNextFillColor(layer, props.textCol[1],props.textCol[2],props.textCol[3], 1)\nsetNextTextAlign(layer,AlignH_Right,AlignV_Bottom)\naddText(layer, font, string.format('KMB Version: %s', VERSION), maxx-xpad, maxy-ypad)\n\n--debugging\nif false then\n\tlayer = createLayer()\n\tsetNextFillColor(layer, 1, 1, 1, 1)\n\tsetNextTextAlign(layer,AlignH_Left,AlignV_Bottom)\n\taddText(layer, font, string.format('render cost : %d / %d', getRenderCost(), getRenderCostMax()), xpad, maxy-ypad)\nend\n\t\n\t]]\nend\n","filter":{"args":[],"signature":"start()","slotKey":"-2"},"key":"3"},{"code":"if controller.currentAction == '' then return end\nprintToConsole('Text input: '..text)\nlocal action = controller.currentAction\nif (action == 'newMsg') then\n    printToConsole('Add New Message Action')\n    local txt = controller:applyMsgCharLimit(text)\n    controller:addNewThread(txt)\n    controller:refresh(action)\nend\nif (action == 'reply') then\n    printToConsole('Reply to Message Action')\n    local txt = controller:applyMsgCharLimit(text)\n    controller:appendToCurrentThread(txt)\n    controller:refresh(action)\nend\nif (startsWith(action,'del') and controller.delpos ~= 0) then\n    local lowerText = text:lower()\n    if (startsWith(lowerText,'y') ) then\n        system.print('Confirmed Delete Action for msg at '..controller.delpos)\n        controller:deleteFromCurrentThread(controller.delpos)\n    end\n    if (controller:isAdmin() and startsWith(lowerText,'a') ) then\n        system.print('Confirmed Delete All Action for msg at '..controller.delpos)\n        controller:deleteAllByPlayer(controller.delpos)\n    end\n    if (startsWith(lowerText,'n')) then\n        system.print('Cancelled Delete Action for msg at '..controller.delpos)\n    end\n    controller.delpos = 0\n    controller:refresh(action)\nend\nif (action == 'promote') then\n    local lowerText = text:lower()\n    if (startsWith(lowerText,'y') ) then\n        system.print('Confirmed Promote Action')\n        controller:togglePromote()\n    end\n    if (startsWith(lowerText,'n')) then\n        system.print('Cancelled Promote Action')\n    end\n    controller:refresh(action)\nend    \ncontroller.currentAction = ''","filter":{"args":[{"variable":"*"}],"signature":"inputText(text)","slotKey":"-2"},"key":"4"}],"methods":[],"events":[]}
